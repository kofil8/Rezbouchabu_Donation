// datasource and generator setup
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------------------------------------------------------
//  ENUMS
// ---------------------------------------------------------

enum Role {
  SUPER_ADMIN
  ADMIN
  SELLER
  DONOR
  RECEIVER
}

enum NotificationType {
  DONATION
  REVIEW
  PLAN
  MESSAGE
}

enum DonationStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum DonorLevel {
  BABYGEEVER
  LITTLEGEEVER
  TEENGEEVER
  ADULTGEEVER
  STRONGGEEVER
  MASTERGEEVER
  KINGOFTHEGEEVERS
  GEEVERGOD
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}

enum SubscriptionPlanType {
  MONTHLY
  YEARLY
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  email        String    @unique
  password     String
  firstName    String
  lastName     String
  fullName     String?
  gender       String?
  profileImage String?
  dateOfBirth  DateTime?
  phoneNumber  String?
  role         Role      @default(DONOR)
  city         String?
  country      String?
  fcmToken     String?
  address      String?

  latitude  Float?
  longitude Float?

  isOnline   Boolean @default(false)
  isVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stripeCustomerId String?        @unique
  subscriptions    Subscription[]

  donations     Donation[]      @relation
  reviews       Review[]        @relation
  notifications Notifications[] @relation("Notifications")

  AddToCart AddToCart[] @relation("UserAddToCart")
  Favourite Favourite[] @relation("UserFavourite")
  level     level[]
  Otp       Otp[]

  message        Message[]      @relation("UserMessages")
  conversations  Conversation[] @relation("User1Conversations")
  conversations2 Conversation[] @relation("User2Conversations")
  Order          Order[]

  @@map("users")
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  otp       Int
  hexCode   String?
  expiry    DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId

  @@map("otps")
}

model level {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  donationId String     @unique @db.ObjectId
  donation   Donation   @relation(fields: [donationId], references: [id])
  level      DonorLevel @default(BABYGEEVER)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  userId     String?    @db.ObjectId
  User       User?      @relation(fields: [userId], references: [id])

  @@map("levels")
}

model SubscriptionPlan {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  priceId      String         @unique // Stripe Price ID
  Subscription Subscription[]
}

model Subscription {
  id                   String           @id @default(auto()) @map("_id") @db.ObjectId
  userId               String           @db.ObjectId
  subscriptionPlanId   String           @db.ObjectId
  stripeSubscriptionId String           @unique
  status               String
  startDate            DateTime
  endDate              DateTime
  renewedAt            DateTime?
  user                 User             @relation(fields: [userId], references: [id])
  subscriptionPlan     SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
}

model antiWasteDonation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  Title       String
  Description String?
  Price       Float
  discount    Float
  Image       String
  type        String
  latitude    Float?
  longitude   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("antiWasteDonations")
}

model Notifications {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId String   @db.ObjectId
  senderId   String   @db.ObjectId
  title      String
  body       String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [receiverId], references: [id], name: "Notifications")

  @@map("notifications")
}

model Donation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  donationImage String?
  category      String?
  condition     String?
  latitude      Float?
  longitude     Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  favorites Favourite[] @relation("DonationFavourite")
  levelId   String?     @db.ObjectId
  level     level?

  Review    Review[]
  Favourite Favourite[]
  User      User?       @relation(fields: [userId], references: [id])
  userId    String?     @db.ObjectId

  @@map("donations")
}

model AddToCart {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String?  @db.ObjectId
  donationId String?  @db.ObjectId
  quantity   Int?
  user       User?    @relation(fields: [userId], references: [id], name: "UserAddToCart")
  // donation   Donation? @relation(fields: [donationId], references: [id], name: "DonationAddToCart")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Favourite {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String?   @db.ObjectId
  donationId String?   @db.ObjectId
  user       User?     @relation(fields: [userId], references: [id], name: "UserFavourite")
  donation   Donation? @relation(fields: [donationId], references: [id], name: "DonationFavourite")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Donation   Donation? @relation(fields: [donationId], references: [id])

  @@map("favourites")
}

model Order {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  userId     String @db.ObjectId
  user       User   @relation(fields: [userId], references: [id])
  businessId String @db.ObjectId
  donationId String @db.ObjectId
  quantity   Int
  total      Float

  status    DonationStatus
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("orders")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  donation   Donation? @relation(fields: [donationId], references: [id])
  donationId String?   @db.ObjectId

  @@map("reviews")
}

model Conversation {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  user1Id   String    @db.ObjectId
  user2Id   String    @db.ObjectId
  messages  Message[] @relation("ConversationMessages")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  user1 User @relation("User1Conversations", fields: [user1Id], references: [id])
  user2 User @relation("User2Conversations", fields: [user2Id], references: [id])

  userId String? @db.ObjectId

  @@map("conversations")
}

model Message {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String   @db.ObjectId
  senderId       String   @db.ObjectId
  receiverId     String   @db.ObjectId
  content        String
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  sender       User         @relation("UserMessages", fields: [senderId], references: [id])
  conversation Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])

  @@map("messages")
}
