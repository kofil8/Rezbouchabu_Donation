// datasource and generator setup
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------------------------------------------------------
//  ENUMS
// ---------------------------------------------------------

enum Role {
  SUPER_ADMIN
  ADMIN
  SELLER
  USER
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}

enum SubscriptionPlanType {
  MONTHLY
  YEARLY
}

// CATEGORIES

enum Category {
  Food
  Object
}

// ---------------------------------------------------------
//  MODELS
// ---------------------------------------------------------

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  email        String    @unique
  password     String?
  firstName    String?
  lastName     String?
  fullName     String?
  gender       String?
  profileImage String?
  dateOfBirth  DateTime?
  phoneNumber  String?
  role         Role      @default(USER)
  city         String?
  country      String?
  fcmToken     String?
  address      String?

  donationCount Int    @default(0)
  userlevel     String @default("Baby Geever")

  latitude  Float?
  longitude Float?

  isOnline   Boolean @default(false)
  isVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stripeCustomerId String?        @unique
  subscriptions    Subscription[]

  donations     Donation[]      @relation
  requests      Requests[]      @relation
  antiWastePost antiWastePost[] @relation
  favorites     Favourite[]     @relation
  reviews       Review[]        @relation
  notifications Notifications[] @relation("Notifications")

  categories CategoryPost[]  @relation
  conditions ConditionPost[] @relation
  Otp        Otp[]

  message        Message[]      @relation("UserMessages")
  conversations  Conversation[] @relation("User1Conversations")
  conversations2 Conversation[] @relation("User2Conversations")
  follower       Follow[]       @relation("UserFollowing")
  following      Follow[]       @relation("UserFollowers")

  @@map("users")
}

model Follow {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId String   @db.ObjectId
  followedId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  follower User @relation("UserFollowing", fields: [followerId], references: [id])
  followed User @relation("UserFollowers", fields: [followedId], references: [id])

  @@map("follows")
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  otp       Int
  hexCode   String?
  expiry    DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId

  @@map("otps")
}

model Subscription {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  userId               String             @db.ObjectId
  user                 User               @relation(fields: [userId], references: [id])
  stripeCustomerId     String
  stripeSubscriptionId String
  planId               String
  status               SubscriptionStatus @default(ACTIVE)
  startDate            DateTime           @default(now())
  endDate              DateTime?
  trialEndDate         DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@map("subscriptions")
}

model antiWastePost {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String?
  price           Float
  contactNumber   String?
  address         String?
  antiWasteImages Json[]
  latitude        Float?
  longitude       Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@map("antiWastePosts")
}

model Notifications {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId String   @db.ObjectId
  senderId   String   @db.ObjectId
  title      String
  body       String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [receiverId], references: [id], name: "Notifications")

  @@map("notifications")
}

// Posts
model Donation {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  donationImages Json[]
  category       Category
  subcategory    String?
  condition      String?
  latitude       Float?
  longitude      Float?
  isDeleted      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  favorites Favourite[] @relation("DonationFavourite")

  Review Review[]

  User   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@map("donations")
}

model Requests {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  category    Category
  subcategory String?
  latitude    Float?
  longitude   Float?
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  favorites Favourite[] @relation("RequestFavourite")

  Review Review[]
  User   User     @relation(fields: [userId], references: [id])
  userId String   @db.ObjectId

  @@map("requests")
}

model CategoryPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@map("categories")
}

model ConditionPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@map("conditions")
}

model Favourite {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String?   @db.ObjectId
  donationId String?   @db.ObjectId
  requestId  String?   @db.ObjectId
  user       User?     @relation(fields: [userId], references: [id])
  donation   Donation? @relation(fields: [donationId], references: [id], name: "DonationFavourite")
  request    Requests? @relation(fields: [requestId], references: [id], name: "RequestFavourite")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("favourites")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  donation   Donation? @relation(fields: [donationId], references: [id])
  donationId String?   @db.ObjectId

  request   Requests? @relation(fields: [requestId], references: [id])
  requestId String?   @db.ObjectId

  @@map("reviews")
}

model Conversation {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  user1Id   String    @db.ObjectId
  user2Id   String    @db.ObjectId
  messages  Message[] @relation("ConversationMessages")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  user1 User @relation("User1Conversations", fields: [user1Id], references: [id])
  user2 User @relation("User2Conversations", fields: [user2Id], references: [id])

  userId String? @db.ObjectId

  @@map("conversations")
}

model Message {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String   @db.ObjectId
  senderId       String   @db.ObjectId
  receiverId     String   @db.ObjectId
  content        String
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  sender       User         @relation("UserMessages", fields: [senderId], references: [id])
  conversation Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])

  @@map("messages")
}
